const express = require('express'); 
const app = express();
const port = 3000; 
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express'); 
const cors = require('cors');
const { body } = require('express-validator'); 
const mariadb = require('mariadb'); 
const pool = mariadb.createPool({
	host: 'localhost',
	user: 'root', 
	password: 'root',
	database: 'sample',
	port: 3306, 
	connectionLimit: 10

});

const options = {
	swaggerDefinition:{
		info:{
			title: 'First Document API',
			version: '1.0.0',
			description: 'First Autogenerated API Document'
		},
		host: 'localhost:3000',
		basePath: '/'
	},
	apis: ['./root/ITIS-6177-Assignment08/server.js'],


		
};
const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs)); 
app.use(cors());



/**
 * @swagger
 * /resource:
 *    get:
 *		description: return all orders 
 *		responses: 
 *		 '200':
 *		   description: Success
 *	 
 */

app.get('/resource', (req, res) =>{
	pool.getConnection()
	.then(conn => {
		conn.query("SELECT * FROM orders")
		
		.then((rows) => {
			res.json(rows);
			console.log('Running resource query');
		})
		.then((res) =>{
			conn.end();
		}).catch(err => {
		//handling error
			console.log(err);
			conn.end();
		})
	}).catch(err =>{
		console.log(err); 	
	});
 
});

/**
 * @swagger
 * /home:
 *    get:
 *		description: return all studentreport 
 *		responses: 
 *		 '200':
 *		   description: Success
 *	 
 */



app.get('/home', (req,res) => {
	pool.getConnection()
        .then(conn => {
                conn.query("SELECT * FROM studentreport")
		.then((rows) => {
                        res.json(rows);
			console.log('Running home query');
                })
                .then((res) =>{ 
                        conn.end();
                }).catch(err => {
                        console.log(err);
                        conn.end();
                })
        }).catch(err =>{

        });


});
/**
 * @swagger
 * /start:
 *    get:
 *		description: return all days order
 *		responses: 
 *		 '200':
 *		   description: Success
 *	 
 */


app.get('/start',(req,res) =>{

        pool.getConnection()
        .then(conn => {
                conn.query("SELECT * FROM daysorder")
		.then((rows) => {
                        res.json(rows);
			console.log('Running start query');
                })
                .then((res) =>{
                        conn.end();
                }).catch(err => {
                        //handling error
                        console.log(err);
                        conn.end();
                })
        }).catch(err =>{

        });
});

/**
 * @swagger 
 * /post_food
 * 	post:
 * 		description: Add new item to food
 * 		produces: 
 * 			-application/json
 * 		responses: 
 * 			200: 
 * 				description: Success
 *
 */
app.post('/post_food', body('query').isEmpty(),
	(req,res) => {
	pool.getConnection()
	.then(conn =>{
		conn.query("INSERT INTO `foods` (`ITEM_ID`, `ITEM_NAME`, `ITEM_UNIT`, `COMPANY_ID`) VALUES ('9', 'Skittles', 'Pcs', '\r')")
		.then((rows) => {
			res.send('Successfully insert new item into food table'); 
			console.log('Insert new items into food');
		})
		.then((res) =>{
			conn.end();
		}).catch(err => {
			//handling error
			console.log(err);
			conn.end();
		})
	}).catch(err =>{
	
	});
});

/**
 * @swagger 
 * /food
 * 	get:
 * 		description: return all items of food table 
 * 		produces: 
 * 			-application/json
 * 		responses: 
 * 			200: 
 * 				description: Success
 *
 */


app.get('/food',(req,res) =>{
	pool.getConnection()
	.then(conn =>{
		conn.query("SELECT * from foods")
		.then((rows) =>{
			res.json(rows); 
		})

		.then((res) =>{
			conn.end();
		}).catch(err =>{
			conn.end();
		})

	}).catch(err =>{

	});

});


/**
 * @swagger 
 * /update_foods
 * 	put:
 * 		description: Update an item to food
 * 		produces: 
 * 			-application/json
 * 		responses: 
 * 			200: 
 * 				description: Success
 *
 */

app.put('/update_foods', body('query').isEmpty(),(req,res) => {
	pool.getConnection()
	.then(conn => {
		conn.query("UPDATE foods SET `ITEM_NAME` = 'M&M' WHERE `ITEM_ID` = 9")
		.then((rows) =>{

			res.send('update food successfully');
			console.log('update successfully');
		})
		.then((res) =>{
			conn.end();
		})
		.catch(err => {
			console.log(err);
			conn.end();
		})		
	}).catch(err => {
	
	});
})

/**
 * @swagger 
 * /post_food
 * 	patch:
 * 		description: Edit an item to food
 * 		produces: 
 * 			-application/json
 * 		responses: 
 * 			200: 
 * 				description: Success
 *
 */
app.patch('/patch_food', body('query').isEmpty(),(req,res) => {
	pool.getConnection()
	.then(conn => {
		conn.query("UPDATE foods SET `ITEM_NAME` = 'SPRINKLES' WHERE `ITEM_ID` = 9")
		.then((rows) => {
			res.send('update food item successfully');
			console.log('update using patch succesfully'); 
		})
		.then((res) =>{
			conn.end();
		})	
		.catch(err => {
			console.log(err); 
			conn.end();
		})
	}).catch(err => {

	});
})
/**
 * @swagger 
 * /delete_food
 * 	delete:
 * 		description: delete item to food
 * 		produces: 
 * 			-application/json
 * 		responses: 
 * 			200: 
 * 				description: Success
 *
 */

app.delete('/delete_food', body('query').isEmpty(),(req,res) => {
	pool.getConnection()
	.then(conn => {
		conn.query("DELETE FROM foods WHERE `ITEM_ID` = 9")
		.then((rows) =>{
			res.send('delete food item successfully');
			console.log('delete successfully');
		})
		.then((res) => {
			conn.end();
		})
		.catch(err =>{
			console.log(err);
			conn.end();
		})
	}).catch(err => {
	
	});

});

app.listen(port, () => {
	console.log(`Example app listening at http://localhost:${port}`)

});

